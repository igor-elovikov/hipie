

from typing import Any

class color:
	...

class vector2:
	...

class vector3:
	...

class vector:
	...

class vector4:
	...

class colora:
	...

class matrix3:
	...

class matrix4:
	...

class bsdf:
	...

class edf:
	...

class vdf:
	...

class atmosphere:
	...

class vector2a:
	...

class surface:
	...

class displacement:
	...


class mtlx:

	class adjustment:

		def contrast(in_in: float, in_amount: float, in_pivot: float, signature: Any):
			...

		def curveadjust(in_in: float, in_knots: vector2a, signature: Any):
			...

		def hsvadjust(in_in: color, in_amount: vector, signature: Any):
			...

		def hsvtorgb(in_in: color, signature: Any):
			...

		def luminance(in_in: color, in_lumacoeffs: color, signature: Any, lumacoeffsmenu: Any):
			...

		def range(in_in: float, in_inlow: float, in_inhigh: float, in_gamma: float, in_outlow: float, in_outhigh: float, in_doclamp: int, signature: Any):
			...

		def remap(in_in: float, in_inlow: float, in_inhigh: float, in_outlow: float, in_outhigh: float, signature: Any):
			...

		def rgbtohsv(in_in: color, signature: Any):
			...

		def saturate(in_in: color, in_amount: float, in_lumacoeffs: color, signature: Any, lumacoeffsmenu: Any):
			...

		def smoothstep(in_in: float, in_low: float, in_high: float, signature: Any):
			...

	class application:

		def frame():
			...

		def time(in_fps: float):
			...

	class channel:

		def combine2(in_in1: color, in_in2: float, signature: Any):
			...

		def combine3(in_in1: float, in_in2: float, in_in3: float, signature: Any):
			...

		def combine4(in_in1: float, in_in2: float, in_in3: float, in_in4: float, signature: Any):
			...

		def convert(in_in: int, signature: Any):
			...

		def extract(in_in: color, signature: Any, index: Any):
			...

		def separate2(in_in: vector2):
			...

		def separate3c(in_in: color):
			...

		def separate3v(in_in: vector):
			...

		def separate4c(in_in: vector4):
			...

		def separate4v(in_in: vector4):
			...

		def swizzle(in_in: color, signature: Any, channels: Any):
			...

	class compositing:

		def burn(in_fg: float, in_bg: float, in_mix: float, signature: Any):
			...

		def difference(in_fg: float, in_bg: float, in_mix: float, signature: Any):
			...

		def disjointover(in_fg: vector4, in_bg: vector4, in_mix: float):
			...

		def dodge(in_fg: float, in_bg: float, in_mix: float, signature: Any):
			...

		def merge(in_fg: vector4, in_bg: vector4, in_mix: float):
			...

		def inside(in_in: float, in_mask: float, signature: Any):
			...

		def mask(in_fg: vector4, in_bg: vector4, in_mix: float):
			...

		def matte(in_fg: vector4, in_bg: vector4, in_mix: float):
			...

		def minus(in_fg: float, in_bg: float, in_mix: float, signature: Any):
			...

		def mix(in_fg: float, in_bg: float, in_mix: float, signature: Any):
			...

		def out(in_fg: vector4, in_bg: vector4, in_mix: float):
			...

		def outside(in_in: float, in_mask: float, signature: Any):
			...

		def over(in_fg: vector4, in_bg: vector4, in_mix: float):
			...

		def overlay(in_fg: float, in_bg: float, in_mix: float, signature: Any):
			...

		def plus(in_fg: float, in_bg: float, in_mix: float, signature: Any):
			...

		def premult(in_in: vector4):
			...

		def screen(in_fg: float, in_bg: float, in_mix: float, signature: Any):
			...

		def unpremult(in_in: vector4):
			...

	class conditional:

		def ifequal(in_value1: float, in_value2: float, in_in1: float, in_in2: float, signature: Any):
			...

		def ifgreater(in_value1: float, in_value2: float, in_in1: float, in_in2: float, signature: Any):
			...

		def ifgreatereq(in_value1: float, in_value2: float, in_in1: float, in_in2: float, signature: Any):
			...

		def switch(in_in1: float, in_in2: float, in_in3: float, in_in4: float, in_in5: float, in_which: float, signature: Any):
			...

	class convolution2d:

		def blur(in_in: float, in_size: float, signature: Any, filtertype: Any):
			...

		def heighttonormal(in_in: float, in_scale: float):
			...

	class geometric:

		def bitangent(space: Any, index: Any):
			...

		def geomcolor(signature: Any, index: Any):
			...

		def geompropvalue(in_default: float, signature: Any, geomprop: Any):
			...

		def normal(space: Any):
			...

		def position(space: Any):
			...

		def tangent(space: Any, index: Any):
			...

		def texcoord(signature: Any, index: Any):
			...

	class globals:

		def ambientocclusion(in_coneangle: float, in_maxdistance: float):
			...

	class houdini:

		def haov(in_in: float, signature: Any, aovname: Any):
			...

		def hcatmullrom(in_t: float, in_tension: float, in_key0: float, in_key1: float, in_key2: float, in_key3: float, signature: Any):
			...

		def hinvlinear(in_ramp: float, in_num: float, in_key0: float, in_key1: float, in_key2: float, in_key3: float, in_key4: float, in_key5: float, in_key6: float, in_key7: float, in_key8: float, in_key9: float):
			...

		def huniformcubic(in_ramp: float, in_num: float, in_value0: float, in_value1: float, in_value2: float, in_value3: float, in_value4: float, in_value5: float, in_value6: float, in_value7: float, in_value8: float, in_value9: float, signature: Any):
			...

		def huniformramp(in_ramp: float, in_num: float, in_value0: float, in_value1: float, in_value2: float, in_value3: float, in_value4: float, in_value5: float, in_value6: float, in_value7: float, in_value8: float, in_value9: float, signature: Any):
			...

	class light:

		def directional_light(in_direction: vector, in_color: color, in_intensity: float):
			...

		def point_light(in_position: vector, in_color: color, in_intensity: float, in_decay_rate: float):
			...

		def spot_light(in_position: vector, in_direction: vector, in_color: color, in_intensity: float, in_decay_rate: float, in_inner_angle: float, in_outer_angle: float):
			...

	class material:

		def surfacematerial(in_surfaceshader: surface, in_displacementshader: displacement):
			...

		def volumematerial(in_volumeshader: atmosphere):
			...

	class math:

		def absval(in_in: float, signature: Any):
			...

		def acos(in_in: float, signature: Any):
			...

		def add(in_in1: float, in_in2: float, signature: Any):
			...

		def arrayappend(in_in1: colora, in_in2: color, signature: Any):
			...

		def asin(in_in: float, signature: Any):
			...

		def atan2(in_in1: float, in_in2: float, signature: Any):
			...

		def ceil(in_in: float, signature: Any):
			...

		def clamp(in_in: float, in_low: float, in_high: float, signature: Any):
			...

		def cos(in_in: float, signature: Any):
			...

		def crossproduct(in_in1: vector, in_in2: vector):
			...

		def determinant(in_in: matrix3, signature: Any):
			...

		def divide(in_in1: float, in_in2: float, signature: Any):
			...

		def dotproduct(in_in1: vector2, in_in2: vector2, signature: Any):
			...

		def exp(in_in: float, signature: Any):
			...

		def floor(in_in: float, signature: Any):
			...

		def invert(in_in: float, in_amount: float, signature: Any):
			...

		def invertmatrix(in_in: matrix3, signature: Any):
			...

		def ln(in_in: float, signature: Any):
			...

		def magnitude(in_in: vector2, signature: Any):
			...

		def max(in_in1: float, in_in2: float, signature: Any):
			...

		def min(in_in1: float, in_in2: float, signature: Any):
			...

		def modulo(in_in1: float, in_in2: float, signature: Any):
			...

		def multiply(in_in1: float, in_in2: float, signature: Any):
			...

		def normalize(in_in: vector, signature: Any):
			...

		def normalmap(in_in: vector, in_scale: float, in_normal: vector, in_tangent: vector, space: Any):
			...

		def place2d(in_texcoord: vector2, in_pivot: vector2, in_scale: vector2, in_rotate: float, in_offset: vector2):
			...

		def power(in_in1: float, in_in2: float, signature: Any):
			...

		def rotate2d(in_in: vector2, in_amount: float):
			...

		def rotate3d(in_in: vector, in_amount: float, in_axis: vector):
			...

		def sign(in_in: float, signature: Any):
			...

		def sin(in_in: float, signature: Any):
			...

		def sqrt(in_in: float, signature: Any):
			...

		def subtract(in_in1: float, in_in2: float, signature: Any):
			...

		def tan(in_in: float, signature: Any):
			...

		def transformmatrix(in_in: vector, in_mat: matrix3, signature: Any):
			...

		def transformnormal(in_in: vector, fromspace: Any, tospace: Any):
			...

		def transformpoint(in_in: vector, fromspace: Any, tospace: Any):
			...

		def transformvector(in_in: vector, fromspace: Any, tospace: Any):
			...

		def transpose(in_in: matrix3, signature: Any):
			...

	class organization:

		def dot(in_in: float, signature: Any, note: Any, incolorspace_filename: Any):
			...

	class other:

		def UsdPrimvarReader(in_fallback: float, signature: Any, varname: Any):
			...

		def UsdTransform2d(in_in: vector2, in_rotation: float, in_scale: vector2, in_translation: vector2):
			...

		def UsdUVTexture(in_st: vector2, in_fallback: vector4, filecolorspace: Any, file: Any, wrapS: Any, wrapT: Any, scale: Any, bias: Any):
			...

		def disney_brdf_2012(in_baseColor: color, in_metallic: float, in_subsurface: float, in_specular: float, in_roughness: float, in_specularTint: float, in_anisotropic: float, in_sheen: float, in_sheenTint: float, in_clearcoat: float, in_clearcoatGloss: float):
			...

		def disney_bsdf_2015(in_baseColor: color, in_metallic: float, in_roughness: float, in_anisotropic: float, in_specularTint: float, in_sheen: float, in_sheenTint: float, in_clearcoat: float, in_clearcoatGloss: float, in_specTrans: float, in_ior: float, in_scatterDistance: vector, in_flatness: float, in_diffTrans: float, thin: Any):
			...

	class pbr:

		def UsdPreviewSurface(in_diffuseColor: color, in_emissiveColor: color, in_useSpecularWorkflow: int, in_specularColor: color, in_metallic: float, in_roughness: float, in_clearcoat: float, in_clearcoatRoughness: float, in_opacity: float, in_opacityThreshold: float, in_ior: float, in_normal: vector, in_displacement: float, in_occlusion: float):
			...

		def absorption_vdf(in_absorption: vector):
			...

		def anisotropic_vdf(in_absorption: vector, in_scattering: vector, in_anisotropy: float):
			...

		def artistic_ior(in_reflectivity: color, in_edge_color: color):
			...

		def blackbody(in_temperature: float):
			...

		def burley_diffuse_bsdf(in_weight: float, in_color: color, in_roughness: float, in_normal: vector):
			...

		def conductor_bsdf(in_weight: float, in_ior: color, in_extinction: color, in_roughness: vector2, in_normal: vector, in_tangent: vector, distribution: Any):
			...

		def conical_edf(in_color: color, in_normal: vector, in_inner_angle: float, in_outer_angle: float):
			...

		def dielectric_bsdf(in_weight: float, in_tint: color, in_ior: float, in_roughness: vector2, in_normal: vector, in_tangent: vector, distribution: Any, scatter_mode: Any):
			...

		def displacement(in_displacement: float, in_scale: float, signature: Any):
			...

		def generalized_schlick_bsdf(in_weight: float, in_color0: color, in_color90: color, in_exponent: float, in_roughness: vector2, in_normal: vector, in_tangent: vector, distribution: Any, scatter_mode: Any):
			...

		def glossiness_anisotropy(in_glossiness: float, in_anisotropy: float):
			...

		def layer(in_top: bsdf, in_base: bsdf):
			...

		def light(in_edf: edf, in_intensity: float, in_exposure: float):
			...

		def measured_edf(in_color: color, in_normal: vector, filecolorspace: Any, file: Any):
			...

		def oren_nayar_diffuse_bsdf(in_weight: float, in_color: color, in_roughness: float, in_normal: vector):
			...

		def roughness_anisotropy(in_roughness: float, in_anisotropy: float):
			...

		def roughness_dual(in_roughness: vector2):
			...

		def sheen_bsdf(in_weight: float, in_color: color, in_roughness: float, in_normal: vector):
			...

		def standard_surface(in_base: float, in_base_color: color, in_diffuse_roughness: float, in_metalness: float, in_specular: float, in_specular_color: color, in_specular_roughness: float, in_specular_IOR: float, in_specular_anisotropy: float, in_specular_rotation: float, in_transmission: float, in_transmission_color: color, in_transmission_depth: float, in_transmission_scatter: color, in_transmission_scatter_anisotropy: float, in_transmission_dispersion: float, in_transmission_extra_roughness: float, in_subsurface: float, in_subsurface_color: color, in_subsurface_radius: color, in_subsurface_scale: float, in_subsurface_anisotropy: float, in_sheen: float, in_sheen_color: color, in_sheen_roughness: float, in_coat: float, in_coat_color: color, in_coat_roughness: float, in_coat_anisotropy: float, in_coat_rotation: float, in_coat_IOR: float, in_coat_normal: vector, in_coat_affect_color: float, in_coat_affect_roughness: float, in_thin_film_thickness: float, in_thin_film_IOR: float, in_emission: float, in_emission_color: color, in_opacity: color, in_thin_walled: int, in_normal: vector, in_tangent: vector, folder0: Any, folder0_1: Any, folder0_2: Any, folder0_3: Any, folder0_4: Any, folder0_5: Any, folder0_6: Any, folder0_7: Any, folder0_8: Any):
			...

		def subsurface_bsdf(in_weight: float, in_color: color, in_radius: vector, in_anisotropy: float, in_normal: vector):
			...

		def surface(in_bsdf: bsdf, in_edf: edf, in_opacity: float):
			...

		def thin_film_bsdf(in_thickness: float, in_ior: float):
			...

		def thin_surface(in_front_bsdf: bsdf, in_front_edf: edf, in_back_bsdf: bsdf, in_back_edf: edf, in_opacity: float):
			...

		def translucent_bsdf(in_weight: float, in_color: color, in_normal: vector):
			...

		def uniform_edf(in_color: color):
			...

		def volume(in_vdf: vdf, in_edf: edf):
			...

	class procedural:

		def constant(in_value: float, signature: Any, valuecolorspace_filename: Any):
			...

		def hcubicrampc(in_input: float, ramp: Any):
			...

		def hcubicrampf(in_input: float, ramp: Any):
			...

		def hrampc(in_input: float, ramp: Any):
			...

		def hrampf(in_input: float, ramp: Any):
			...

	class procedural2d:

		def cellnoise2d(in_texcoord: vector2):
			...

		def noise2d(in_amplitude: float, in_pivot: float, in_texcoord: vector2, signature: Any):
			...

		def ramp4(in_valuetl: float, in_valuetr: float, in_valuebl: float, in_valuebr: float, in_texcoord: vector2, signature: Any):
			...

		def ramplr(in_valuel: float, in_valuer: float, in_texcoord: vector2, signature: Any):
			...

		def ramptb(in_valuet: float, in_valueb: float, in_texcoord: vector2, signature: Any):
			...

		def splitlr(in_valuel: float, in_valuer: float, in_center: float, in_texcoord: vector2, signature: Any):
			...

		def splittb(in_valuet: float, in_valueb: float, in_center: float, in_texcoord: vector2, signature: Any):
			...

		def worleynoise2d(in_texcoord: vector2, in_jitter: float, signature: Any):
			...

	class procedural3d:

		def cellnoise3d(in_position: vector):
			...

		def fractal3d(in_amplitude: float, in_octaves: int, in_lacunarity: float, in_diminish: float, in_position: vector, signature: Any):
			...

		def noise3d(in_amplitude: float, in_pivot: float, in_position: vector, signature: Any):
			...

		def worleynoise3d(in_position: vector, in_jitter: float, signature: Any):
			...

	class texture2d:

		def image(in_default: float, in_texcoord: vector2, signature: Any, filecolorspace: Any, file: Any, layer: Any, uaddressmode: Any, vaddressmode: Any, filtertype: Any, framerange: Any, frameoffset: Any, frameendaction: Any):
			...

		def tiledimage(in_default: float, in_texcoord: vector2, in_uvtiling: vector2, in_uvoffset: vector2, in_realworldimagesize: vector2, in_realworldtilesize: vector2, signature: Any, filecolorspace: Any, file: Any, filtertype: Any, framerange: Any, frameoffset: Any, frameendaction: Any):
			...

	class texture3d:

		def triplanarprojection(in_default: float, in_position: vector, in_normal: vector, signature: Any, filexcolorspace: Any, filex: Any, fileycolorspace: Any, filey: Any, filezcolorspace: Any, filez: Any, layerx: Any, layery: Any, layerz: Any, filtertype: Any, framerange: Any, frameoffset: Any, frameendaction: Any):
			...

