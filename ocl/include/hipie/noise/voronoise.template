#ifndef __ie_svnoise_h
#define __ie_svnoise_h

#include "hash_impl.h"

:: set signature = ["v", "v.x, v.y", "v.x, v.y, v.z", "v.x, v.y, v.z, v.w"]
:: set type = ["float", "float2", "float3", "float4"]
:: set fmod_func = ["fmodr", "fmod2r", "fmod3r", "fmod4r"]
:: set dist_func = ["length", "manhattan_dist", "chebyshev_dist", "minkowski_dist"]
:: set dist_func2 = ["length", "manhattan_dist2", "chebyshev_dist2", "minkowski_dist2"]
:: set func_prefix = ["", "m", "c", "mk"]


// Voronoise

// 2d
:: for period in range(2)
:: for i in range(4)
static float {{"p" if period == 1}}{{ func_prefix[i] }}voronoise2(float2 pos, 
    float u, float v{% if period == 1 %},
    int2 period{% endif %}{% if i == 3 %},
    float minkowski_number{% endif %} )
{
:: if period == 1
    float2 fperiod = convert_float2(period);
    pos *= fperiod;
:: endif

    float2 p;
    float2 f = fract(pos, &p);

    float k = 1.0 + 63.0*pow(1.0-v,4.0);
    float va = 0.0;
    float wt = 0.0;

    for( int x=-2; x<=2; x++ )
        for( int y=-2; y<=2; y++ )
        {
            float2  g = (float2)(x, y);
            float3  o = hash_2_3({{"fmod2r(" if period == 1}} p + g {{", fperiod)" if period == 1}})*(float3)(u,u,1.0);
            float2  r = g - f + o.xy;
            float d = {{ dist_func2[i] }}(r{% if i == 3 %}, minkowski_number{% endif %});
            float w = pow( 1.f - smoothstep(0.f, 1.414f, d), k );
            va += w*o.z;
            wt += w;
        }

    return va/wt;
}
:: endfor
:: endfor


// 3d
:: for period in range(2)
:: for i in range(4)
static float {{"p" if period == 1}}{{ func_prefix[i] }}voronoise3(float3 pos, 
    float u, float v{% if period == 1 %},
    int3 period{% endif %}{% if i == 3 %},
    float minkowski_number{% endif %} )
{
:: if period == 1
    float3 fperiod = convert_float3(period);
    pos *= fperiod;
:: endif

    float3 p;
    float3 f = fract(pos, &p);

    float k = 1.0 + 63.0*pow(1.0-v,4.0);
    float va = 0.0;
    float wt = 0.0;

    for( int x=-2; x<=2; x++ )
        for( int y=-2; y<=2; y++ )
            for( int z=-2; z<=2; z++ )
            {
                float3  g = (float3)(x, y, z);
                float4  o = hash_3_4({{"fmod3r(" if period == 1}} p + g {{", fperiod)" if period == 1}})*(float4)(u,u,u,1.0);
                float3  r = g - f + o.xyz;
                float d = {{ dist_func[i] }}(r{% if i == 3 %}, minkowski_number{% endif %});
                float w = pow( 1.f - smoothstep(0.f, 1.732f, d), k );
                va += w*o.w;
                wt += w;
            }

    return va/wt;
}
:: endfor
:: endfor

#endif